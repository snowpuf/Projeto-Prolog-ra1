% interface_usuario.pl

:- consult('motor_inferencia.pl').
:- dynamic resposta/2.

% FLUXO PRINCIPAL
iniciar :-
    questionario,
    mostrarresultado.

% PREDICADO PARA EXIBIR PERGUNTAS E VALIDAR RESPOSTAS
perguntar(Id) :-
    pergunta(Id, Texto, ),
    format("~w, (s/n)", [Texto]), nl,
    read(Resposta),
    ( member(Resposta, [s, n]) ->
        assertz(resposta(Id, Resposta));
        writeln('Entrada inválida! Responda com s ou n.'),
        perguntar(Id)
    ).

% PREDICADO PARA EXIBIR QUESTIONÁRIO DINÂMICO
questionario :-
    writeln('Olá! Seja bem-vindo ao teste de compatibilidade para especializações de TI.'),
    writeln('Responda as perguntas com s (sim) ou n (não).'), nl,
    forall(pergunta(Id, , ), perguntar(Id)), nl.


% PREDICADO PARA CÁLCULAR DE PONTUAÇÃO POR TRILHA
valor_resposta(s, 1).
valor_resposta(n, 0).

pontuacao(Trilha, Total) :-
    findall(
        Valor,
        ( 
          perfil(Trilha, Caracteristica, Peso), 
          pergunta(Id, _, Caracteristica), 
          resposta(Id, Resposta),
          valor_resposta(Resposta, V),
          Valor is Peso * V
        ),
        ListaValores
        ),
    sum_list(ListaValores, Total).

% PREDICADO PARA GERAR LISTA DE PONTUAÇÕES POR TRILHA
lista_pontuacao_trilha(ListaPontuacaoTrilha) :-
    findall(
        (Total, Trilha),
        (trilha(Trilha, _), pontuacao(Trilha, Total)),
        ListaPontuacao
        ),
    sort(ListaPontuacao, ListaCrescente),
    reverse(ListaCrescente, ListaPontuacaoTrilha).

% PREDICADO PARA JUSTIFICAR RECOMENDAÇÃO
justificativa(Trilha) :-
    writeln('Justificativa para a trilha:'),
    forall(
        (
            perfil(Trilha, Caracteristica, Peso),
            pergunta(Id, Texto, Caracteristica),
            resposta(Id, Resposta),
            valor_resposta(Resposta, V),
            V > 0
        ),
        format('Pergunta: ~w, Peso: ~w, Resposta: ~w~n', [Texto, Peso, Resposta])
    ).


% PREDICADO PARA EXIBIR AFINIDADE COM CADA TRILHA
mostrar_resultado :-
    lista_pontuacao_trilha(Lista),
    writeln('Resultados finais:'), nl,
    forall(
        member((Total, Trilha), Lista),
        (
            format('Trilha: ~w, Pontuação: ~w~n', [Trilha, Total]), nl,
            justificativa(Trilha), nl
        )
    ).

% PREDICADO PARA EXECUTAR ARQUIVO DE TESTE
testeperfil(Arquivo) :-
    retractall(resposta(, _)),
    consult(Arquivo),
    mostrar_resultado.
